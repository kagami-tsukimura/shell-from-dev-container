#!/usr/bin/env python3

# ./pyminish
import os
import signal
import sys


def builtin_echo(args):
    print("".join(args))


def builtin_exit(args):
    exit(0)


BUILTIN_COMMAND_FUNC_MAPPING = {"echo": builtin_echo, "exit": builtin_exit}


def find_command(command):
    if "/" in command:
        return command if os.path.exists(command) else None

    for path_dir in os.environ["PATH"].split(":"):
        full_path = os.path.join(path_dir, command)
        if os.path.exists(full_path) and not os.path.isdir(full_path):
            return full_path
    return None


def set_stdio(stdin_fd=None, stdout_fd=None):
    # dup2: システムコールでファイルディスクリプタを変更
    if stdin_fd is not None:
        # sys.stdin.fileno(): 0
        os.dup2(stdin_fd, sys.stdin.fileno())
    if stdout_fd is not None:
        # sys.stdout.fileno(): 1
        os.dup2(stdout_fd, sys.stdout.fileno())


def run_command(tokens, stdin_fd=None, stdout_fd=None):
    command = tokens[0]
    args = tokens[1:]

    # TODO: run command
    if command in BUILTIN_COMMAND_FUNC_MAPPING:
        # 内部コマンド
        BUILTIN_COMMAND_FUNC_MAPPING[command](args)
    else:
        # 外部コマンド
        command_path = find_command(command)
        if command_path is None:
            print(f"Command not found: {command}", file=sys.stderr)
            return

        # シェルの実行
        # NOTE: プロセスを複製して親プロセスと子プロセスに分ける
        pid = os.fork()

        if pid == 0:
            # 標準出力のファイルディスクリプタを変更
            set_stdio(stdin_fd, stdout_fd)
            # パスからファイル名を取り出す
            command_basename = os.path.basename(command_path)
            # NOTE: プロセスに関する処理をカーネルに依頼（別プロセス起動）
            os.execve(command_path, [command_basename] + args, os.environ)
        else:
            os.waitpid(pid, 0)
            return


def interpret_line(line):
    if line.strip().startswith("#"):
        return

    tokens = line.split()

    if len(tokens) == 0:
        return

    redirection_count = tokens.count(">")
    pipe_count = tokens.count("|")

    if redirection_count + pipe_count >= 2:
        print("More than 2 redirections or pipes are not supported", file=sys.stderr)
        return

    if redirection_count == 1:
        # リダイレクト時の処理
        redirection_index = tokens.index(">")
        # ">" 以前をコマンドと引数として取り出す
        command_and_args = tokens[:redirection_index]
        # ">" の右側をファイル名として取り出す
        stdout_file_name = tokens[redirection_index + 1]

        with open(stdout_file_name, "w") as f:
            # ファイルディスクリプタを確認して実行
            stdout_fd = f.fileno()
            run_command(command_and_args, stdout_fd=stdout_fd)

        pass
    elif pipe_count == 1:
        # TODO: pipe
        pass
    else:
        run_command(tokens)


def sigint_handler(signum, frame):
    pass


def main():
    if len(sys.argv) >= 2:
        file_name = sys.argv[1]
    else:
        file_name = None

    if file_name is None:
        # インタラクティブシェル
        signal.signal(signal.SIGINT, sigint_handler)

        while True:
            line = input(">")
            interpret_line(line)

    else:
        # シェルスクリプト
        with open(file_name) as f:
            # シェルの各行を実行
            for line in f:
                interpret_line(line)


if __name__ == "__main__":
    main()
